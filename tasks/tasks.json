{
  "meta": {
    "projectName": "Kosmologogenesis",
    "version": "0.0.1",
    "source": "scripts/prd.txt",
    "description": "Tasks generated by Boomerange Tasks",
    "totalTasksGenerated": 0,
    "tasksIncluded": 0
  },
  "tasks": [
    {
      "id": 1,
      "title": "Implement Subtraction Function in calculator.py",
      "description": "Create a Python function named 'subtract_numbers' that accepts two arguments and returns the result of subtracting the second number from the first.",
      "status": "pending",
      "dependencies": [],
      "priority": "medium",
      "details": "Implement a function called 'subtract_numbers' in the existing calculator.py file. The function should:\n\n1. Accept two parameters: 'x' and 'y' (both numeric values)\n2. Return the result of x - y\n3. Include a comprehensive docstring that explains:\n   - The function's purpose\n   - Parameter descriptions including expected types\n   - Return value description\n   - At least one example of usage\n\nThe function signature should be: `def subtract_numbers(x, y):`\n\nEnsure the function handles both integer and floating-point inputs correctly. The implementation should be placed in the same file as the previously created 'add_numbers' function.",
      "testStrategy": "To verify correct implementation:\n\n1. Import the function: `from calculator import subtract_numbers`\n2. Test with integer inputs: `subtract_numbers(5, 3)` should return `2`\n3. Test with floating-point inputs: `subtract_numbers(10.5, 4.2)` should return `6.3` (within floating-point precision)\n4. Test with negative numbers: `subtract_numbers(-8, 3)` should return `-11`\n5. Test with zero: `subtract_numbers(7, 0)` should return `7`\n6. Verify docstring exists and is comprehensive using Python's help() function or checking `subtract_numbers.__doc__`\n7. Ensure the function maintains the same coding style and conventions as the existing add_numbers function"
    },
    {
      "id": 2,
      "title": "Implement Prime Number Checker Function",
      "description": "Create a Python function that determines whether a given number is prime or not.",
      "status": "pending",
      "dependencies": [],
      "priority": "medium",
      "details": "Implement a function named 'is_prime' in a new file named 'prime_checker.py'. The function should:\n\n1. Accept a single integer parameter 'number'\n2. Return True if the number is prime, False otherwise\n3. Handle edge cases properly:\n   - Numbers less than 2 are not prime\n   - 2 is the only even prime number\n   - For numbers > 2, check divisibility from 2 up to the square root of the number (for efficiency)\n4. Include appropriate docstrings explaining the function's purpose, parameters, and return value\n5. Optimize the algorithm to efficiently check large numbers\n\nThe implementation should follow PEP 8 style guidelines and include comments explaining the logic where necessary.",
      "testStrategy": "The implementation should be tested with the following cases:\n\n1. Test with known prime numbers (e.g., 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31)\n2. Test with known non-prime numbers (e.g., 4, 6, 8, 9, 10, 12, 15, 20, 21, 25)\n3. Test edge cases:\n   - Negative numbers (should return False)\n   - Zero and one (should return False)\n   - Very large prime numbers (e.g., 104729, which is the 10,000th prime)\n   - Very large non-prime numbers\n\nCreate a test file named 'test_prime_checker.py' using a testing framework like pytest or unittest. Each test case should verify that the function returns the expected result for the given input. Also, include performance testing for large numbers to ensure the implementation is efficient."
    }
  ]
}